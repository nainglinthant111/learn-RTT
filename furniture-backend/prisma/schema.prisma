generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    ADMIN
    AUTHOR
}

enum Status {
    ACTIVE
    INACTIVE
    FREEZE
}

model User {
    id              Int       @id @default(autoincrement())
    firstName       String?   @db.VarChar(52)
    lastName        String?   @db.VarChar(52)
    phone           String    @unique @db.VarChar(15)
    password        String
    email           String?   @unique @db.VarChar(52)
    role            Role      @default(USER)
    status          Status    @default(ACTIVE)
    lastLogin       DateTime?
    errorLoginCount Int       @default(0) @db.SmallInt
    randonToken     String
    image           String?
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    posts           Post[]
    orders          Order[]
}

model Post {
    id         Int      @id @default(autoincrement())
    title      String   @db.VarChar(255)
    content    String
    body       String
    image      String
    autherId   Int
    author     User     @relation(fields: [autherId], references: [id])
    categoryId Int
    category   Category @relation(fields: [categoryId], references: [id])
    typeId     Int
    type       Type     @relation(fields: [typeId], references: [id])
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Category {
    id       Int       @id @default(autoincrement())
    name     String    @db.VarChar(52)
    posts    Post[]
    products Product[]
}

model Type {
    id       Int       @id @default(autoincrement())
    name     String    @db.VarChar(52)
    posts    Post[]
    products Product[]
}

model Tag {
    id        Int        @id @default(autoincrement())
    name      String     @db.VarChar(52)
    taggables Taggable[]
}

model Taggable {
    id     Int    @id @default(autoincrement())
    tagId  Int
    tag    Tag    @relation(fields: [tagId], references: [id])
    type   String @db.VarChar(7)
    typeId Int
}

model Product {
    id          Int               @id @default(autoincrement())
    name        String            @db.VarChar(255)
    description String
    price       Decimal           @db.Decimal(10, 2)
    discount    Decimal           @default(0) @db.Decimal(10, 2)
    rating      Int               @default(0) @db.SmallInt
    inventory   Int               @default(0)
    status      Status            @default(ACTIVE)
    categoryId  Int
    category    Category          @relation(fields: [categoryId], references: [id])
    typeId      Int
    type        Type              @relation(fields: [typeId], references: [id])
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    images      Image[]
    orders      ProducrsOnOrder[]
}

model Image {
    id        Int     @id @default(autoincrement())
    path      String  @db.VarChar(255)
    productId Int
    product   Product @relation(fields: [productId], references: [id])
}

model Order {
    id         Int               @id @default(autoincrement())
    userId     Int
    user       User              @relation(fields: [userId], references: [id])
    code       String            @db.VarChar(15)
    totalPrice Decimal           @db.Decimal(10, 2)
    createdAt  DateTime          @default(now())
    updatedAt  DateTime          @updatedAt
    producrs   ProducrsOnOrder[]
}

model ProducrsOnOrder {
    id        Int     @id @default(autoincrement())
    orderId   Int
    order     Order   @relation(fields: [orderId], references: [id])
    productId Int
    product   Product @relation(fields: [productId], references: [id])
    quantity  Int     @db.SmallInt
    price     Decimal @db.Decimal(10, 2)
}

model Otp {
    id            Int      @id @default(autoincrement())
    phone         String   @unique @db.VarChar(15)
    otp           String
    remenverToken String
    verifyToken   String?
    count         Int      @default(0) @db.SmallInt
    error         Int      @default(0) @db.SmallInt
    email         String?  @unique @db.VarChar(52)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model Setting {
    id    Int    @id @default(autoincrement())
    key   String @unique @db.VarChar(50)
    value String @db.VarChar(200)
}
